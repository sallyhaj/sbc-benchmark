sbc-bench v0.9.67 Libre Computer AML-A311D-CC Alta (Sat, 22 Jun 2024 12:18:52 -0400)

Distributor ID:	Debian
Description:	Debian GNU/Linux trixie/sid
Codename:	trixie

Device Info:
	Manufacturer: libre-computer
	Product Name: aml-a311d-cc

BIOS/UEFI:
	Vendor: U-Boot
	Version: 2024.01+
	Release Date: 01/01/2024
	BIOS Revision: 24.1

/usr/bin/gcc (Debian 13.2.0-25) 13.2.0

Uptime: 12:18:52 up 6 min,  3 users,  load average: 1.79, 1.46, 0.67,  47.2Â°C,  141220028

Linux 6.9.3 (alta-debian) 	06/22/24 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          22.49    0.02    2.84    0.45    0.00   74.21

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          76.38      2450.82       876.15         0.00    1008340     360472          0

               total        used        free      shared  buff/cache   available
Mem:           3.7Gi       826Mi       2.7Gi        68Mi       365Mi       2.9Gi
Swap:          4.2Gi          0B       4.2Gi

Filename				Type		Size		Used		Priority
/dev/mmcblk0p3                          partition	4424700		0		-2

Zswap active using zstd/z3fold, max pool occupation: 20%, details:
	pool_limit_hit:0
	pool_total_size:0
	reject_alloc_fail:0
	reject_compress_fail:0
	reject_compress_poor:0
	reject_kmemcache_fail:0
	reject_reclaim_fail:0
	same_filled_pages:0
	stored_pages:0
	written_back_pages:0

##########################################################################

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2012 (2012.687/2012.436/2012.059)
Cpufreq OPP: 1800    Measured: 1796 (1797.240/1796.655/1796.250)
Cpufreq OPP: 1608    Measured: 1604 (1605.318/1604.636/1603.414)
Cpufreq OPP: 1398    Measured: 1394 (1394.628/1394.628/1394.611)
Cpufreq OPP: 1200    Measured: 1196 (1196.708/1196.603/1195.868)
Cpufreq OPP: 1000    Measured:  996    (996.892/996.879/996.742)
Cpufreq OPP:  500    Measured:  497    (497.251/497.112/497.031)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2208    Measured: 2206 (2206.382/2206.354/2206.354)
Cpufreq OPP: 2016    Measured: 2014 (2014.414/2014.414/2014.313)
Cpufreq OPP: 1800    Measured: 1798 (1798.472/1798.360/1798.338)
Cpufreq OPP: 1608    Measured: 1606 (1606.431/1606.411/1606.250)
Cpufreq OPP: 1398    Measured: 1396 (1396.522/1396.452/1396.347)
Cpufreq OPP: 1200    Measured: 1198 (1198.483/1198.468/1198.468)
Cpufreq OPP: 1000    Measured:  998    (998.655/998.617/998.467)
Cpufreq OPP:  500    Measured:  498    (498.571/498.539/498.489)

##########################################################################

Hardware sensors:

cpu_thermal-virtual-0
temp1:        +49.5 C  

ddr_thermal-virtual-0
temp1:        +51.5 C  

##########################################################################

Executing benchmark on cpu0 (Cortex-A53):

tinymembench v0.4.9-nuumio (simple benchmark for memory throughput and latency)

CFLAGS: 
bandwidth test min repeats (-b): 2
bandwidth test max repeats (-B): 3
bandwidth test mem realloc (-M): no      (-m for realloc)
      latency test repeats (-l): 3
        latency test count (-c): 1000000

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :   2243.4 MB/s (3, 6.3%)
 C copy backwards (32 byte blocks)                :   2282.5 MB/s (3, 0.8%)
 C copy backwards (64 byte blocks)                :   2283.9 MB/s (3, 0.6%)
 C copy                                           :   2267.9 MB/s (3, 1.4%)
 C copy prefetched (32 bytes step)                :   1761.4 MB/s (2)
 C copy prefetched (64 bytes step)                :   2031.8 MB/s (3, 0.4%)
 C 2-pass copy                                    :   1941.9 MB/s (3, 0.1%)
 C 2-pass copy prefetched (32 bytes step)         :   1337.0 MB/s (2)
 C 2-pass copy prefetched (64 bytes step)         :   1553.8 MB/s (2)
 C scan 8                                         :    390.5 MB/s (3, 0.3%)
 C scan 16                                        :    765.0 MB/s (3, 0.1%)
 C scan 32                                        :   1430.0 MB/s (3, 0.4%)
 C scan 64                                        :   2496.3 MB/s (3, 1.5%)
 C fill                                           :   7838.6 MB/s (3, 0.1%)
 C fill (shuffle within 16 byte blocks)           :   7844.7 MB/s (2)
 C fill (shuffle within 32 byte blocks)           :   7827.5 MB/s (2)
 C fill (shuffle within 64 byte blocks)           :   7842.2 MB/s (2)
 ---
 libc memcpy copy                                 :   2348.7 MB/s (3, 1.7%)
 libc memchr scan                                 :   2379.2 MB/s (3, 1.8%)
 libc memset fill                                 :   7847.7 MB/s (2)
 ---
 NEON LDP/STP copy                                :   2427.5 MB/s (3, 0.4%)
 NEON LDP/STP copy pldl2strm (32 bytes step)      :   1520.8 MB/s (3, 1.8%)
 NEON LDP/STP copy pldl2strm (64 bytes step)      :   2015.9 MB/s (3, 0.5%)
 NEON LDP/STP copy pldl1keep (32 bytes step)      :   2647.1 MB/s (3, 0.2%)
 NEON LDP/STP copy pldl1keep (64 bytes step)      :   2632.8 MB/s (2)
 NEON LD1/ST1 copy                                :   2368.7 MB/s (3, 2.0%)
 NEON LDP load                                    :   3589.2 MB/s (3)
 NEON LDNP load                                   :   2483.2 MB/s (3, 0.7%)
 NEON STP fill                                    :   7831.7 MB/s (2)
 NEON STNP fill                                   :   6443.1 MB/s (3, 0.4%)
 ARM LDP/STP copy                                 :   2427.3 MB/s (3, 0.5%)
 ARM LDP load                                     :   3587.9 MB/s (2)
 ARM LDNP load                                    :   2493.8 MB/s (3, 0.7%)
 ARM STP fill                                     :   7837.9 MB/s (3, 0.1%)
 ARM STNP fill                                    :   6439.9 MB/s (3, 0.2%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)             :    246.6 MB/s (2)
 NEON LDP/STP 2-pass copy (from framebuffer)      :    281.8 MB/s (3)
 NEON LD1/ST1 copy (from framebuffer)             :     73.9 MB/s (2)
 NEON LD1/ST1 2-pass copy (from framebuffer)      :     75.7 MB/s (2)
 ARM LDP/STP copy (from framebuffer)              :    136.8 MB/s (2)
 ARM LDP/STP 2-pass copy (from framebuffer)       :    147.3 MB/s (3, 0.3%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.0 ns 
     65536 :    3.5 ns          /     5.8 ns 
    131072 :    5.5 ns          /     8.1 ns 
    262144 :    8.1 ns          /    11.9 ns 
    524288 :   62.6 ns          /    98.6 ns 
   1048576 :   95.4 ns          /   129.5 ns 
   2097152 :  112.9 ns          /   140.2 ns 
   4194304 :  125.5 ns          /   148.2 ns 
   8388608 :  132.5 ns          /   153.5 ns 
  16777216 :  136.4 ns          /   155.1 ns 
  33554432 :  139.7 ns          /   157.1 ns 
  67108864 :  149.3 ns          /   176.8 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.0 ns 
     65536 :    3.5 ns          /     5.7 ns 
    131072 :    5.5 ns          /     8.0 ns 
    262144 :    7.1 ns          /     9.5 ns 
    524288 :   62.5 ns          /    98.3 ns 
   1048576 :   96.0 ns          /   131.8 ns 
   2097152 :  113.0 ns          /   143.1 ns 
   4194304 :  121.8 ns          /   147.4 ns 
   8388608 :  126.1 ns          /   146.9 ns 
  16777216 :  127.7 ns          /   147.9 ns 
  33554432 :  127.6 ns          /   145.6 ns 
  67108864 :  129.2 ns          /   147.1 ns 

Executing benchmark on cpu2 (Cortex-A73):

tinymembench v0.4.9-nuumio (simple benchmark for memory throughput and latency)

CFLAGS: 
bandwidth test min repeats (-b): 2
bandwidth test max repeats (-B): 3
bandwidth test mem realloc (-M): no      (-m for realloc)
      latency test repeats (-l): 3
        latency test count (-c): 1000000

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :   4980.2 MB/s (2)
 C copy backwards (32 byte blocks)                :   4978.8 MB/s (2)
 C copy backwards (64 byte blocks)                :   4981.0 MB/s (3, 0.6%)
 C copy                                           :   4951.4 MB/s (2)
 C copy prefetched (32 bytes step)                :   4946.5 MB/s (2)
 C copy prefetched (64 bytes step)                :   4954.7 MB/s (2)
 C 2-pass copy                                    :   3244.0 MB/s (2)
 C 2-pass copy prefetched (32 bytes step)         :   3252.7 MB/s (2)
 C 2-pass copy prefetched (64 bytes step)         :   3242.2 MB/s (3, 0.2%)
 C scan 8                                         :    733.6 MB/s (2)
 C scan 16                                        :   1466.9 MB/s (2)
 C scan 32                                        :   2932.9 MB/s (2)
 C scan 64                                        :   5719.3 MB/s (2)
 C fill                                           :   9738.7 MB/s (3, 2.8%)
 C fill (shuffle within 16 byte blocks)           :   9793.7 MB/s (3, 0.4%)
 C fill (shuffle within 32 byte blocks)           :   9768.2 MB/s (3, 0.2%)
 C fill (shuffle within 64 byte blocks)           :   9748.9 MB/s (2)
 ---
 libc memcpy copy                                 :   4927.4 MB/s (2)
 libc memchr scan                                 :   9189.1 MB/s (2)
 libc memset fill                                 :   9802.0 MB/s (3, 0.3%)
 ---
 NEON LDP/STP copy                                :   4945.1 MB/s (2)
 NEON LDP/STP copy pldl2strm (32 bytes step)      :   4946.8 MB/s (2)
 NEON LDP/STP copy pldl2strm (64 bytes step)      :   4942.4 MB/s (2)
 NEON LDP/STP copy pldl1keep (32 bytes step)      :   4698.8 MB/s (3, 0.6%)
 NEON LDP/STP copy pldl1keep (64 bytes step)      :   4897.8 MB/s (2)
 NEON LD1/ST1 copy                                :   4947.1 MB/s (2)
 NEON LDP load                                    :   9736.0 MB/s (3)
 NEON LDNP load                                   :   9733.3 MB/s (2)
 NEON STP fill                                    :   9795.5 MB/s (3, 0.2%)
 NEON STNP fill                                   :   9769.4 MB/s (3, 0.2%)
 ARM LDP/STP copy                                 :   4944.9 MB/s (2)
 ARM LDP load                                     :   9735.8 MB/s (2)
 ARM LDNP load                                    :   9737.7 MB/s (3, 0.6%)
 ARM STP fill                                     :   9787.3 MB/s (3, 0.3%)
 ARM STNP fill                                    :   9778.1 MB/s (3, 0.3%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)             :    470.6 MB/s (3, 0.7%)
 NEON LDP/STP 2-pass copy (from framebuffer)      :    500.8 MB/s (2)
 NEON LD1/ST1 copy (from framebuffer)             :    473.3 MB/s (3, 0.5%)
 NEON LD1/ST1 2-pass copy (from framebuffer)      :    500.1 MB/s (2)
 ARM LDP/STP copy (from framebuffer)              :    452.8 MB/s (3, 0.7%)
 ARM LDP/STP 2-pass copy (from framebuffer)       :    494.4 MB/s (2)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.0 ns 
     65536 :    5.1 ns          /     8.4 ns 
    131072 :    7.6 ns          /    11.7 ns 
    262144 :    9.6 ns          /    13.1 ns 
    524288 :   11.4 ns          /    13.6 ns 
   1048576 :   22.6 ns          /    33.1 ns 
   2097152 :   75.1 ns          /   110.6 ns 
   4194304 :  104.9 ns          /   138.5 ns 
   8388608 :  123.8 ns          /   151.2 ns 
  16777216 :  133.8 ns          /   155.8 ns 
  33554432 :  139.4 ns          /   159.8 ns 
  67108864 :  142.3 ns          /   162.2 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.0 ns 
     65536 :    5.1 ns          /     8.4 ns 
    131072 :    7.6 ns          /    11.6 ns 
    262144 :    9.0 ns          /    13.1 ns 
    524288 :   10.0 ns          /    13.7 ns 
   1048576 :   11.3 ns          /    14.8 ns 
   2097152 :   73.4 ns          /   110.2 ns 
   4194304 :  101.8 ns          /   134.8 ns 
   8388608 :  116.7 ns          /   143.9 ns 
  16777216 :  124.1 ns          /   148.0 ns 
  33554432 :  127.7 ns          /   148.1 ns 
  67108864 :  130.3 ns          /   150.3 ns 

##########################################################################

Executing ramlat on cpu0 (Cortex-A53), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 2.016 1.997 1.495 1.491 1.491 1.495 2.059 4.162 
         8k: 1.991 1.988 1.493 1.491 1.491 1.491 2.050 4.178 
        16k: 1.988 1.988 1.491 1.491 1.494 1.491 2.053 4.168 
        32k: 1.995 2.004 1.497 1.494 1.495 1.494 2.054 4.175 
        64k: 16.79 15.54 13.63 15.12 13.52 15.21 18.53 33.42 
       128k: 17.35 17.13 16.00 16.88 16.01 16.90 19.88 38.18 
       256k: 18.60 18.17 17.78 18.02 17.81 18.38 20.81 39.68 
       512k: 123.2 138.4 134.1 139.6 135.2 138.7 171.0 310.4 
      1024k: 145.8 146.5 146.1 147.0 146.2 146.5 169.7 322.3 
      2048k: 146.8 148.0 147.0 147.4 147.0 147.4 172.3 323.3 
      4096k: 147.4 147.7 147.2 147.5 147.1 147.6 169.5 321.0 
      8192k: 137.7 138.6 137.9 138.4 137.8 138.4 164.4 315.0 
     16384k: 142.3 143.6 142.9 142.8 142.6 142.7 165.5 319.7 
     32768k: 144.8 145.6 144.8 145.2 145.1 145.3 170.8 319.5 
     65536k: 135.2 135.5 135.2 135.4 136.2 136.3 163.2 310.7 
    131072k: 137.7 137.8 137.7 137.8 137.7 137.9 164.1 312.2 

Executing ramlat on cpu2 (Cortex-A73), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 1.815 1.813 1.813 1.813 1.360 1.360 2.517 3.594 
         8k: 1.813 1.814 1.815 1.813 1.360 1.360 2.490 3.585 
        16k: 1.813 1.813 1.813 1.813 1.360 1.360 1.892 3.585 
        32k: 1.816 1.817 1.816 1.815 1.362 1.362 1.900 3.586 
        64k: 9.646 9.973 9.646 9.974 9.721 9.877 11.67 21.21 
       128k: 11.28 11.30 11.28 11.30 11.28 11.29 12.90 25.31 
       256k: 11.33 11.34 11.34 11.34 11.33 11.35 12.70 25.55 
       512k: 11.33 11.33 11.34 11.34 11.33 11.33 12.70 25.56 
      1024k: 13.05 12.24 16.51 13.37 14.12 12.41 13.81 28.79 
      2048k: 152.1 152.5 152.4 152.4 150.1 152.3 156.2 166.8 
      4096k: 131.8 132.6 132.4 132.6 131.2 132.9 134.4 137.5 
      8192k: 142.7 142.1 142.0 141.9 142.0 142.4 144.1 152.2 
     16384k: 137.4 137.3 137.5 137.6 137.4 137.7 137.0 145.2 
     32768k: 144.1 144.2 144.1 144.2 145.0 144.3 144.1 154.2 
     65536k: 143.8 143.9 143.7 143.8 143.7 144.0 143.6 154.0 
    131072k: 142.3 142.2 142.1 142.3 142.1 142.6 143.1 151.2 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 3.2.2, built on 4 Jun 2024 (Library: OpenSSL 3.2.2 4 Jun 2024)
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     138663.52k   435801.45k   921899.86k  1310761.98k  1500198.23k  1512346.97k (Cortex-A53)
aes-128-cbc     296591.70k   794321.83k  1349972.48k  1629835.26k  1746616.32k  1755540.14k (Cortex-A73)
aes-192-cbc     133528.06k   394934.29k   763785.22k  1019090.60k  1129947.14k  1135853.57k (Cortex-A53)
aes-192-cbc     280096.33k   725626.41k  1146215.51k  1374182.06k  1457946.62k  1464178.01k (Cortex-A73)
aes-256-cbc     130351.23k   367981.25k   669351.77k   856224.43k   933658.62k   938770.43k (Cortex-A53)
aes-256-cbc     272537.45k   671957.42k  1034097.24k  1189482.15k  1251196.93k  1255260.16k (Cortex-A73)

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 32000000 64000000 64000000 128000000 256000000 256000000 1024000000 2048000000

RAM size:    3761 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1198    99   1178   1166  |      21490    99   1848   1835
23:       1173    99   1208   1195  |      20995    99   1832   1817
24:       1154    99   1255   1242  |      20537    99   1819   1803
25:       1149    99   1326   1312  |      20237    99   1817   1801
----------------------------------  | ------------------------------
Avr:              99   1242   1229  |               99   1829   1814
Tot:              99   1535   1521

Executing benchmark single-threaded on cpu2 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - 64000000 64000000 64000000 - - - - -

RAM size:    3761 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2026   100   1979   1971  |      28948   100   2476   2472
23:       1982   100   2028   2020  |      28382   100   2462   2457
24:       1945   100   2100   2092  |      27810   100   2446   2441
25:       1914   100   2195   2186  |      27301   100   2435   2430
----------------------------------  | ------------------------------
Avr:             100   2076   2067  |              100   2455   2450
Tot:             100   2265   2259

##########################################################################

Executing benchmark 3 times multi-threaded on CPUs 0-5

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 64000000 - - 128000000 - 512000000 1024000000 2048000000

RAM size:    3761 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7282   553   1281   7084  |     135016   518   2224  11514
23:       7159   560   1302   7295  |     132109   517   2211  11431
24:       6967   564   1329   7492  |     130309   520   2198  11438
25:       6906   567   1392   7886  |     125175   520   2144  11140
----------------------------------  | ------------------------------
Avr:             561   1326   7439  |              519   2194  11381
Tot:             540   1760   9410

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - 64000000 - - 256000000 - - 2048000000

RAM size:    3761 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7257   558   1264   7060  |     130576   519   2146  11136
23:       7112   558   1298   7247  |     126985   516   2127  10988
24:       6991   566   1329   7517  |     124036   517   2108  10887
25:       6839   556   1405   7809  |     121515   520   2081  10814
----------------------------------  | ------------------------------
Avr:             560   1324   7408  |              518   2115  10956
Tot:             539   1720   9182

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - 64000000 64000000 - 128000000 - - - -

RAM size:    3761 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7369   553   1296   7169  |     126144   518   2075  10758
23:       7211   559   1314   7348  |     123607   519   2059  10696
24:       7009   561   1343   7537  |     120010   520   2026  10534
25:       6835   557   1401   7804  |     116818   518   2006  10396
----------------------------------  | ------------------------------
Avr:             558   1338   7464  |              519   2042  10596
Tot:             538   1690   9030

Compression: 7439,7408,7464
Decompression: 11381,10956,10596
Total: 9410,9182,9030

##########################################################################

** cpuminer-multi 1.3.7 by tpruvot@github **
BTC donation address: 1FhDPLPpw18X4srecguG3MxJYe4a1JsZnd (tpruvot)

[2024-06-22 12:32:12] 6 miner threads started, using 'scrypt' algorithm.
[2024-06-22 12:32:12] CPU #5: 2.08 kH/s
[2024-06-22 12:32:12] CPU #3: 2.01 kH/s
[2024-06-22 12:32:12] CPU #4: 1.94 kH/s
[2024-06-22 12:32:12] CPU #0: 1.87 kH/s
[2024-06-22 12:32:12] CPU #1: 1.86 kH/s
[2024-06-22 12:32:12] CPU #2: 1.73 kH/s
[2024-06-22 12:32:17] Total: 11.92 kH/s
[2024-06-22 12:32:22] CPU #4: 2.07 kH/s
[2024-06-22 12:32:22] CPU #3: 2.07 kH/s
[2024-06-22 12:32:22] CPU #5: 2.07 kH/s
[2024-06-22 12:32:22] Total: 11.81 kH/s
[2024-06-22 12:32:22] CPU #2: 2.07 kH/s
[2024-06-22 12:32:22] CPU #1: 1.75 kH/s
[2024-06-22 12:32:22] CPU #0: 1.74 kH/s
[2024-06-22 12:32:27] Total: 11.71 kH/s
[2024-06-22 12:32:32] CPU #4: 2.06 kH/s
[2024-06-22 12:32:32] CPU #3: 2.07 kH/s
[2024-06-22 12:32:32] CPU #5: 2.06 kH/s
[2024-06-22 12:32:32] Total: 11.68 kH/s
[2024-06-22 12:32:32] CPU #2: 2.07 kH/s
[2024-06-22 12:32:32] CPU #1: 1.74 kH/s
[2024-06-22 12:32:32] CPU #0: 1.73 kH/s
[2024-06-22 12:32:37] Total: 11.74 kH/s
[2024-06-22 12:32:42] CPU #4: 2.06 kH/s
[2024-06-22 12:32:42] CPU #3: 2.06 kH/s
[2024-06-22 12:32:42] CPU #5: 2.05 kH/s
[2024-06-22 12:32:42] Total: 11.68 kH/s
[2024-06-22 12:32:42] CPU #2: 2.06 kH/s
[2024-06-22 12:32:42] CPU #1: 1.73 kH/s
[2024-06-22 12:32:42] CPU #0: 1.72 kH/s
[2024-06-22 12:32:47] Total: 11.66 kH/s
[2024-06-22 12:32:52] CPU #4: 2.05 kH/s
[2024-06-22 12:32:52] CPU #3: 2.05 kH/s
[2024-06-22 12:32:52] CPU #5: 2.04 kH/s
[2024-06-22 12:32:52] Total: 11.62 kH/s
[2024-06-22 12:32:52] CPU #2: 2.05 kH/s
[2024-06-22 12:32:52] CPU #1: 1.72 kH/s
[2024-06-22 12:32:52] CPU #0: 1.71 kH/s
[2024-06-22 12:32:57] Total: 11.60 kH/s
[2024-06-22 12:33:02] CPU #4: 2.04 kH/s
[2024-06-22 12:33:02] CPU #3: 2.03 kH/s
[2024-06-22 12:33:02] CPU #5: 2.03 kH/s
[2024-06-22 12:33:02] Total: 11.55 kH/s
[2024-06-22 12:33:02] CPU #2: 2.04 kH/s
[2024-06-22 12:33:02] CPU #1: 1.72 kH/s
[2024-06-22 12:33:02] CPU #0: 1.70 kH/s
[2024-06-22 12:33:07] Total: 11.55 kH/s
[2024-06-22 12:33:12] CPU #4: 2.03 kH/s
[2024-06-22 12:33:12] CPU #3: 2.01 kH/s
[2024-06-22 12:33:12] CPU #5: 2.03 kH/s
[2024-06-22 12:33:12] Total: 11.52 kH/s
[2024-06-22 12:33:12] CPU #2: 2.04 kH/s
[2024-06-22 12:33:12] CPU #1: 1.71 kH/s
[2024-06-22 12:33:12] CPU #0: 1.70 kH/s
[2024-06-22 12:33:17] Total: 11.52 kH/s
[2024-06-22 12:33:22] CPU #4: 2.04 kH/s
[2024-06-22 12:33:22] CPU #3: 2.03 kH/s
[2024-06-22 12:33:22] CPU #5: 2.03 kH/s
[2024-06-22 12:33:22] Total: 11.54 kH/s
[2024-06-22 12:33:22] CPU #2: 2.04 kH/s
[2024-06-22 12:33:22] CPU #1: 1.72 kH/s
[2024-06-22 12:33:22] CPU #0: 1.70 kH/s
[2024-06-22 12:33:27] Total: 11.53 kH/s
[2024-06-22 12:33:32] CPU #4: 2.02 kH/s
[2024-06-22 12:33:32] CPU #3: 2.02 kH/s
[2024-06-22 12:33:32] CPU #5: 2.02 kH/s
[2024-06-22 12:33:32] Total: 11.48 kH/s
[2024-06-22 12:33:32] CPU #2: 2.03 kH/s
[2024-06-22 12:33:32] CPU #1: 1.71 kH/s
[2024-06-22 12:33:32] CPU #0: 1.69 kH/s
[2024-06-22 12:33:37] Total: 11.50 kH/s
[2024-06-22 12:33:42] CPU #4: 2.01 kH/s
[2024-06-22 12:33:42] CPU #3: 2.01 kH/s
[2024-06-22 12:33:42] CPU #5: 2.00 kH/s
[2024-06-22 12:33:42] Total: 11.47 kH/s
[2024-06-22 12:33:42] CPU #2: 2.01 kH/s
[2024-06-22 12:33:42] CPU #1: 1.70 kH/s
[2024-06-22 12:33:42] CPU #0: 1.68 kH/s
[2024-06-22 12:33:47] Total: 11.43 kH/s
[2024-06-22 12:33:52] CPU #4: 2.01 kH/s
[2024-06-22 12:33:52] CPU #3: 2.01 kH/s
[2024-06-22 12:33:52] CPU #5: 2.01 kH/s
[2024-06-22 12:33:52] Total: 11.45 kH/s
[2024-06-22 12:33:52] CPU #2: 2.00 kH/s
[2024-06-22 12:33:52] CPU #1: 1.70 kH/s
[2024-06-22 12:33:52] CPU #0: 1.68 kH/s
[2024-06-22 12:33:57] Total: 11.42 kH/s
[2024-06-22 12:34:02] CPU #4: 2.01 kH/s
[2024-06-22 12:34:02] CPU #3: 2.01 kH/s
[2024-06-22 12:34:02] CPU #5: 2.00 kH/s
[2024-06-22 12:34:02] Total: 11.41 kH/s
[2024-06-22 12:34:02] CPU #2: 2.01 kH/s
[2024-06-22 12:34:02] CPU #1: 1.70 kH/s
[2024-06-22 12:34:02] CPU #0: 1.68 kH/s
[2024-06-22 12:34:07] Total: 11.42 kH/s
[2024-06-22 12:34:12] CPU #4: 2.01 kH/s
[2024-06-22 12:34:12] CPU #3: 2.00 kH/s
[2024-06-22 12:34:12] CPU #5: 2.00 kH/s
[2024-06-22 12:34:12] Total: 11.40 kH/s
[2024-06-22 12:34:12] CPU #2: 2.00 kH/s
[2024-06-22 12:34:12] CPU #1: 1.69 kH/s
[2024-06-22 12:34:12] CPU #0: 1.68 kH/s
[2024-06-22 12:34:17] Total: 11.38 kH/s
[2024-06-22 12:34:22] CPU #4: 2.00 kH/s
[2024-06-22 12:34:22] CPU #3: 2.00 kH/s
[2024-06-22 12:34:22] CPU #5: 2.00 kH/s
[2024-06-22 12:34:22] Total: 11.39 kH/s
[2024-06-22 12:34:22] CPU #2: 2.01 kH/s
[2024-06-22 12:34:22] CPU #1: 1.69 kH/s
[2024-06-22 12:34:22] CPU #0: 1.68 kH/s
[2024-06-22 12:34:27] Total: 11.39 kH/s
[2024-06-22 12:34:32] CPU #4: 2.01 kH/s
[2024-06-22 12:34:32] CPU #3: 2.00 kH/s
[2024-06-22 12:34:32] CPU #5: 2.00 kH/s
[2024-06-22 12:34:32] Total: 11.38 kH/s
[2024-06-22 12:34:32] CPU #2: 2.01 kH/s
[2024-06-22 12:34:32] CPU #1: 1.69 kH/s
[2024-06-22 12:34:32] CPU #0: 1.68 kH/s
[2024-06-22 12:34:37] Total: 11.38 kH/s
[2024-06-22 12:34:42] CPU #4: 2.01 kH/s
[2024-06-22 12:34:42] CPU #3: 2.00 kH/s
[2024-06-22 12:34:42] CPU #5: 1.99 kH/s
[2024-06-22 12:34:42] Total: 11.38 kH/s
[2024-06-22 12:34:42] CPU #2: 2.01 kH/s
[2024-06-22 12:34:42] CPU #1: 1.69 kH/s
[2024-06-22 12:34:42] CPU #0: 1.67 kH/s
[2024-06-22 12:34:47] Total: 11.37 kH/s
[2024-06-22 12:34:52] CPU #4: 2.01 kH/s
[2024-06-22 12:34:52] CPU #3: 2.00 kH/s
[2024-06-22 12:34:52] CPU #5: 1.99 kH/s
[2024-06-22 12:34:52] Total: 11.37 kH/s
[2024-06-22 12:34:52] CPU #2: 2.01 kH/s
[2024-06-22 12:34:52] CPU #1: 1.69 kH/s
[2024-06-22 12:34:52] CPU #0: 1.67 kH/s
[2024-06-22 12:34:57] Total: 11.36 kH/s
[2024-06-22 12:35:02] CPU #4: 1.99 kH/s
[2024-06-22 12:35:02] CPU #3: 1.99 kH/s
[2024-06-22 12:35:02] CPU #5: 1.99 kH/s
[2024-06-22 12:35:02] Total: 11.33 kH/s
[2024-06-22 12:35:02] CPU #2: 2.00 kH/s
[2024-06-22 12:35:02] CPU #1: 1.69 kH/s
[2024-06-22 12:35:03] CPU #0: 1.67 kH/s
[2024-06-22 12:35:07] Total: 11.34 kH/s
[2024-06-22 12:35:11] CPU #0: 1.67 kH/s
[2024-06-22 12:35:12] CPU #4: 1.99 kH/s
[2024-06-22 12:35:12] CPU #3: 1.98 kH/s
[2024-06-22 12:35:12] CPU #5: 1.99 kH/s
[2024-06-22 12:35:12] Total: 11.32 kH/s
[2024-06-22 12:35:12] CPU #2: 2.00 kH/s
[2024-06-22 12:35:12] CPU #1: 1.68 kH/s
[2024-06-22 12:35:17] Total: 11.33 kH/s
[2024-06-22 12:35:17] CPU #0: 1.67 kH/s
[2024-06-22 12:35:22] CPU #4: 2.00 kH/s
[2024-06-22 12:35:22] CPU #3: 1.99 kH/s
[2024-06-22 12:35:22] CPU #5: 1.99 kH/s
[2024-06-22 12:35:22] Total: 11.34 kH/s
[2024-06-22 12:35:22] CPU #2: 2.00 kH/s
[2024-06-22 12:35:22] CPU #1: 1.69 kH/s
[2024-06-22 12:35:27] Total: 11.33 kH/s
[2024-06-22 12:35:27] CPU #0: 1.67 kH/s
[2024-06-22 12:35:32] CPU #4: 1.99 kH/s
[2024-06-22 12:35:32] CPU #3: 2.00 kH/s
[2024-06-22 12:35:32] CPU #5: 1.99 kH/s
[2024-06-22 12:35:32] Total: 11.33 kH/s
[2024-06-22 12:35:32] CPU #2: 2.00 kH/s
[2024-06-22 12:35:32] CPU #1: 1.69 kH/s
[2024-06-22 12:35:37] Total: 11.33 kH/s
[2024-06-22 12:35:37] CPU #0: 1.67 kH/s
[2024-06-22 12:35:42] CPU #4: 1.98 kH/s
[2024-06-22 12:35:42] CPU #3: 1.99 kH/s
[2024-06-22 12:35:42] CPU #5: 1.99 kH/s
[2024-06-22 12:35:42] Total: 11.31 kH/s
[2024-06-22 12:35:42] CPU #2: 1.99 kH/s
[2024-06-22 12:35:42] CPU #1: 1.69 kH/s
[2024-06-22 12:35:47] Total: 11.32 kH/s
[2024-06-22 12:35:47] CPU #0: 1.67 kH/s
[2024-06-22 12:35:52] CPU #4: 1.98 kH/s
[2024-06-22 12:35:52] CPU #3: 1.99 kH/s
[2024-06-22 12:35:52] CPU #5: 1.99 kH/s
[2024-06-22 12:35:52] Total: 11.31 kH/s
[2024-06-22 12:35:52] CPU #2: 2.00 kH/s
[2024-06-22 12:35:52] CPU #1: 1.68 kH/s
[2024-06-22 12:35:57] Total: 11.31 kH/s
[2024-06-22 12:35:57] CPU #0: 1.67 kH/s
[2024-06-22 12:36:02] CPU #4: 1.98 kH/s
[2024-06-22 12:36:02] CPU #3: 1.99 kH/s
[2024-06-22 12:36:02] CPU #5: 1.99 kH/s
[2024-06-22 12:36:02] Total: 11.30 kH/s
[2024-06-22 12:36:02] CPU #2: 1.99 kH/s
[2024-06-22 12:36:02] CPU #1: 1.68 kH/s
[2024-06-22 12:36:07] Total: 11.30 kH/s
[2024-06-22 12:36:07] CPU #0: 1.67 kH/s
[2024-06-22 12:36:12] CPU #4: 1.98 kH/s
[2024-06-22 12:36:12] CPU #3: 1.98 kH/s
[2024-06-22 12:36:12] CPU #5: 1.99 kH/s
[2024-06-22 12:36:12] Total: 11.30 kH/s
[2024-06-22 12:36:12] CPU #2: 1.99 kH/s
[2024-06-22 12:36:12] CPU #1: 1.68 kH/s
[2024-06-22 12:36:17] Total: 11.29 kH/s
[2024-06-22 12:36:17] CPU #0: 1.66 kH/s
[2024-06-22 12:36:22] CPU #4: 1.98 kH/s
[2024-06-22 12:36:22] CPU #3: 1.98 kH/s
[2024-06-22 12:36:22] CPU #5: 1.98 kH/s
[2024-06-22 12:36:22] Total: 11.28 kH/s
[2024-06-22 12:36:22] CPU #2: 1.99 kH/s
[2024-06-22 12:36:22] CPU #1: 1.68 kH/s
[2024-06-22 12:36:23] CPU #0: 1.66 kH/s
[2024-06-22 12:36:27] Total: 11.29 kH/s
[2024-06-22 12:36:32] CPU #4: 1.98 kH/s
[2024-06-22 12:36:32] CPU #3: 1.99 kH/s
[2024-06-22 12:36:32] CPU #5: 1.99 kH/s
[2024-06-22 12:36:32] Total: 11.29 kH/s
[2024-06-22 12:36:32] CPU #2: 1.99 kH/s
[2024-06-22 12:36:32] CPU #1: 1.68 kH/s
[2024-06-22 12:36:32] CPU #0: 1.66 kH/s
[2024-06-22 12:36:37] Total: 11.28 kH/s
[2024-06-22 12:36:42] CPU #4: 1.98 kH/s
[2024-06-22 12:36:42] CPU #3: 1.98 kH/s
[2024-06-22 12:36:42] CPU #5: 1.99 kH/s
[2024-06-22 12:36:42] Total: 11.29 kH/s
[2024-06-22 12:36:42] CPU #2: 1.99 kH/s
[2024-06-22 12:36:42] CPU #1: 1.68 kH/s
[2024-06-22 12:36:42] CPU #0: 1.66 kH/s
[2024-06-22 12:36:47] Total: 11.27 kH/s
[2024-06-22 12:36:52] CPU #4: 1.98 kH/s
[2024-06-22 12:36:52] CPU #3: 1.98 kH/s
[2024-06-22 12:36:52] CPU #5: 1.98 kH/s
[2024-06-22 12:36:52] Total: 11.27 kH/s
[2024-06-22 12:36:52] CPU #2: 1.99 kH/s
[2024-06-22 12:36:52] CPU #1: 1.68 kH/s
[2024-06-22 12:36:52] CPU #0: 1.66 kH/s
[2024-06-22 12:36:57] Total: 11.27 kH/s
[2024-06-22 12:37:02] CPU #4: 1.97 kH/s
[2024-06-22 12:37:02] CPU #3: 1.98 kH/s
[2024-06-22 12:37:02] CPU #5: 1.98 kH/s
[2024-06-22 12:37:02] Total: 11.25 kH/s
[2024-06-22 12:37:02] CPU #2: 1.99 kH/s
[2024-06-22 12:37:02] CPU #1: 1.68 kH/s
[2024-06-22 12:37:02] CPU #0: 1.66 kH/s
[2024-06-22 12:37:07] Total: 11.26 kH/s

Total Scores: 11.74,11.71,11.68,11.66,11.62,11.60,11.55,11.54,11.53,11.52,11.50,11.48,11.47,11.45,11.43,11.42,11.41,11.40,11.39,11.38,11.37,11.36,11.34,11.33,11.32,11.31,11.30,11.29,11.28,11.27,11.26,11.25

##########################################################################

Testing maximum cpufreq again, still under full load. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:37:02: 2016/1800MHz  6.02 100%   0%  99%   0%   0%   0%  85.1Â°C  

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2012 (2012.763/2012.511/2012.411)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2208    Measured: 2206 (2206.437/2206.354/2206.244)

##########################################################################

Hardware sensors:

cpu_thermal-virtual-0
temp1:        +70.2 C  

ddr_thermal-virtual-0
temp1:        +73.5 C  

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (cpu-thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:20:01: 2208/2016MHz  1.40  24%   2%  20%   0%   0%   0%  52.6Â°C  
12:20:21: 2208/2016MHz  1.29  16%   0%  16%   0%   0%   0%  51.8Â°C  
12:20:42: 2208/2016MHz  1.20  16%   0%  16%   0%   0%   0%  52.9Â°C  
12:21:02: 2208/2016MHz  1.15  16%   0%  16%   0%   0%   0%  53.2Â°C  
12:21:22: 2208/2016MHz  1.10  16%   0%  16%   0%   0%   0%  51.4Â°C  
12:21:42: 2208/2016MHz  1.07  16%   0%  16%   0%   0%   0%  56.3Â°C  
12:22:02: 2208/2016MHz  1.05  16%   0%  16%   0%   0%   0%  57.9Â°C  
12:22:22: 2208/2016MHz  1.04  16%   0%  16%   0%   0%   0%  59.9Â°C  
12:22:43: 2208/2016MHz  1.27  18%   0%  16%   0%   0%   0%  60.7Â°C  
12:23:03: 2208/2016MHz  1.19  17%   0%  16%   0%   0%   0%  56.0Â°C  

System health while running ramlat:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:23:10: 2208/2016MHz  1.17  22%   2%  19%   0%   0%   0%  56.8Â°C  
12:23:16: 2208/2016MHz  1.16  16%   0%  16%   0%   0%   0%  54.1Â°C  
12:23:22: 2208/2016MHz  1.13  16%   0%  16%   0%   0%   0%  53.9Â°C  
12:23:28: 2208/2016MHz  1.12  16%   0%  16%   0%   0%   0%  53.6Â°C  
12:23:34: 2208/2016MHz  1.11  16%   0%  16%   0%   0%   0%  53.5Â°C  
12:23:40: 2208/2016MHz  1.10  16%   0%  16%   0%   0%   0%  53.5Â°C  
12:23:46: 2208/2016MHz  1.10  16%   0%  16%   0%   0%   0%  54.5Â°C  
12:23:52: 2208/2016MHz  1.08  16%   0%  16%   0%   0%   0%  55.2Â°C  
12:23:58: 2208/2016MHz  1.07  16%   0%  16%   0%   0%   0%  54.7Â°C  
12:24:05: 2208/2016MHz  1.07  16%   0%  16%   0%   0%   0%  54.5Â°C  
12:24:11: 2208/2016MHz  1.06  16%   0%  16%   0%   0%   0%  54.1Â°C  
12:24:17: 2208/2016MHz  1.05  16%   0%  16%   0%   0%   0%  54.6Â°C  

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:24:18: 2208/2016MHz  1.05  21%   1%  19%   0%   0%   0%  55.7Â°C  
12:24:34: 2208/2016MHz  1.04  16%   0%  16%   0%   0%   0%  52.7Â°C  
12:24:50: 2208/2016MHz  1.03  16%   0%  16%   0%   0%   0%  56.6Â°C  
12:25:06: 2208/2016MHz  1.02  16%   0%  16%   0%   0%   0%  52.8Â°C  
12:25:22: 2208/2016MHz  1.02  16%   0%  16%   0%   0%   0%  57.2Â°C  
12:25:38: 2208/2016MHz  1.01  16%   0%  16%   0%   0%   0%  53.2Â°C  
12:25:54: 2208/2016MHz  1.01  16%   0%  16%   0%   0%   0%  57.2Â°C  

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:26:06: 2208/2016MHz  1.01  21%   1%  19%   0%   0%   0%  57.6Â°C  
12:26:15: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  53.4Â°C  
12:26:24: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.8Â°C  
12:26:33: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.8Â°C  
12:26:42: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.5Â°C  
12:26:51: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.5Â°C  
12:27:00: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.5Â°C  
12:27:10: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.4Â°C  
12:27:19: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.3Â°C  
12:27:28: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.3Â°C  
12:27:37: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  52.1Â°C  
12:27:46: 2208/2016MHz  1.00  17%   0%  16%   0%   0%   0%  54.1Â°C  
12:27:55: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  55.3Â°C  
12:28:04: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  55.6Â°C  
12:28:13: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  55.7Â°C  
12:28:22: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  55.9Â°C  
12:28:31: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  56.0Â°C  
12:28:40: 2208/2016MHz  1.00  16%   0%  16%   0%   0%   0%  56.1Â°C  

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:28:48: 2208/2016MHz  1.00  20%   1%  18%   0%   0%   0%  58.3Â°C  
12:28:59: 2208/2016MHz  1.70  86%   0%  85%   0%   0%   0%  78.7Â°C  
12:29:10: 2208/2016MHz  2.22  86%   0%  85%   0%   0%   0%  80.6Â°C  
12:29:21: 2208/2016MHz  2.80  83%   0%  82%   0%   0%   0%  76.2Â°C  
12:29:31: 2208/2016MHz  3.44  96%   0%  95%   0%   0%   0%  74.3Â°C  
12:29:41: 2208/2016MHz  3.54  79%   1%  77%   0%   0%   0%  77.9Â°C  
12:29:52: 2016/2016MHz  4.07  98%   0%  97%   0%   0%   0%  84.6Â°C  
12:30:03: 2016/2016MHz  4.72  79%   0%  78%   0%   0%   0%  85.6Â°C  
12:30:14: 2208/2016MHz  4.99  87%   0%  86%   0%   0%   0%  81.3Â°C  
12:30:24: 2208/2016MHz  5.15  83%   0%  82%   0%   0%   0%  75.4Â°C  
12:30:35: 2208/2016MHz  5.28  96%   1%  94%   0%   0%   0%  85.6Â°C  
12:30:45: 2208/2016MHz  5.39  78%   1%  76%   0%   0%   0%  82.6Â°C  
12:30:57: 2016/1800MHz  5.64  96%   1%  93%   0%   0%   0%  87.7Â°C  
12:31:07: 2208/2016MHz  5.54  87%   0%  86%   0%   0%   0%  83.9Â°C  
12:31:17: 2208/2016MHz  5.29  93%   0%  92%   0%   0%   0%  81.6Â°C  
12:31:28: 2208/2016MHz  5.40  90%   0%  88%   0%   0%   0%  84.5Â°C  
12:31:38: 2208/2016MHz  5.20  82%   1%  80%   0%   0%   0%  84.3Â°C  
12:31:48: 2208/2016MHz  5.01  86%   0%  85%   0%   0%   0%  78.4Â°C  
12:31:58: 2208/2016MHz  5.31  88%   1%  85%   0%   0%   0%  84.6Â°C  
12:32:09: 2016/1800MHz  5.49  97%   0%  96%   0%   0%   0%  84.8Â°C  

System health while running cpuminer:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:32:14: 2016/1800MHz  5.69  31%   1%  30%   0%   0%   0%  86.6Â°C  
12:32:55: 2016/1800MHz  5.84 100%   0%  99%   0%   0%   0%  86.9Â°C  
12:33:36: 2016/1800MHz  5.92 100%   0%  99%   0%   0%   0%  84.4Â°C  
12:34:17: 1800/1800MHz  5.96 100%   0%  99%   0%   0%   0%  84.9Â°C  
12:34:58: 2016/1800MHz  6.02 100%   0%  99%   0%   0%   0%  84.4Â°C  
12:35:39: 1800/1608MHz  6.07 100%   0%  99%   0%   0%   0%  84.7Â°C  
12:36:21: 2016/1608MHz  6.03 100%   0%  99%   0%   0%   0%  83.5Â°C  
12:37:02: 2016/1800MHz  6.02 100%   0%  99%   0%   0%   0%  85.1Â°C  

##########################################################################

Throttling statistics (time spent on each cpufreq OPP) for CPUs 0-1 (Cortex-A53):

2016 MHz:  692.61 sec
1800 MHz:  283.87 sec
1608 MHz:   54.79 sec
1398 MHz:       0 sec
1200 MHz:       0 sec
1000 MHz:       0 sec
 500 MHz:       0 sec

Throttling statistics (time spent on each cpufreq OPP) for CPUs 2-5 (Cortex-A73):

2208 MHz:  692.62 sec
2016 MHz:  283.87 sec
1800 MHz:   54.78 sec
1608 MHz:       0 sec
1398 MHz:       0 sec
1200 MHz:       0 sec
1000 MHz:       0 sec
 500 MHz:       0 sec

##########################################################################

Linux 6.9.3 (alta-debian) 	06/22/24 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          43.68    0.01    1.45    0.12    0.00   54.74

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          21.26       671.88       238.54         0.00    1021760     362760          0

               total        used        free      shared  buff/cache   available
Mem:           3.7Gi       799Mi       2.7Gi        68Mi       379Mi       2.9Gi
Swap:          4.2Gi          0B       4.2Gi

Filename				Type		Size		Used		Priority
/dev/mmcblk0p3                          partition	4424700		0		-2

Zswap active using zstd/z3fold, max pool occupation: 20%, details:
	pool_limit_hit:0
	pool_total_size:0
	reject_alloc_fail:0
	reject_compress_fail:0
	reject_compress_poor:0
	reject_kmemcache_fail:0
	reject_reclaim_fail:0
	same_filled_pages:0
	stored_pages:0
	written_back_pages:0

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      500    2016   Cortex-A53 / r0p4
  1        0        0      500    2016   Cortex-A53 / r0p4
  2        0        2      500    2208   Cortex-A73 / r0p2
  3        0        2      500    2208   Cortex-A73 / r0p2
  4        0        2      500    2208   Cortex-A73 / r0p2
  5        0        2      500    2208   Cortex-A73 / r0p2

Architecture:                         aarch64
CPU op-mode(s):                       32-bit, 64-bit
Byte Order:                           Little Endian
CPU(s):                               6
On-line CPU(s) list:                  0-5
Vendor ID:                            ARM
BIOS Vendor ID:                       Unknown
Model name:                           Cortex-A53
BIOS Model name:                      Unknown  CPU @ 0.0GHz
BIOS CPU family:                      2
Model:                                4
Thread(s) per core:                   1
Core(s) per socket:                   2
Socket(s):                            1
Stepping:                             r0p4
CPU(s) scaling MHz:                   100%
CPU max MHz:                          2016.0000
CPU min MHz:                          500.0000
BogoMIPS:                             48.00
Flags:                                fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
Model name:                           Cortex-A73
BIOS Model name:                      Unknown  CPU @ 0.0GHz
BIOS CPU family:                      2
Model:                                2
Thread(s) per core:                   1
Core(s) per socket:                   4
Socket(s):                            1
Stepping:                             r0p2
CPU(s) scaling MHz:                   100%
CPU max MHz:                          2208.0000
CPU min MHz:                          500.0000
BogoMIPS:                             48.00
Flags:                                fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
Vulnerability Gather data sampling:   Not affected
Vulnerability Itlb multihit:          Not affected
Vulnerability L1tf:                   Not affected
Vulnerability Mds:                    Not affected
Vulnerability Meltdown:               Not affected
Vulnerability Mmio stale data:        Not affected
Vulnerability Reg file data sampling: Not affected
Vulnerability Retbleed:               Not affected
Vulnerability Spec rstack overflow:   Not affected
Vulnerability Spec store bypass:      Vulnerable
Vulnerability Spectre v1:             Mitigation; __user pointer sanitization
Vulnerability Spectre v2:             Vulnerable
Vulnerability Srbds:                  Not affected
Vulnerability Tsx async abort:        Not affected

Processor Information
	Type: Central Processor
	Status: Unpopulated

SoC guess: Amlogic Meson G12B (A311D) Revision 29:b (10:2)
DT compat: libretech,aml-a311d-cc
           amlogic,a311d
           amlogic,g12b
 Compiler: /usr/bin/gcc (Debian 13.2.0-25) 13.2.0 / aarch64-linux-gnu
 Userland: arm64
   Kernel: 6.9.3/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT_BUILD=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_DYNAMIC=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y
           CONFIG_PREEMPT_VOLUNTARY=y

##########################################################################

   opp-table-0:
       500 MHz    731.0 mV
      1000 MHz    761.0 mV
      1200 MHz    781.0 mV
      1398 MHz    811.0 mV
      1608 MHz    901.0 mV
      1800 MHz   1001.0 mV
      2016 MHz   1011.0 mV

   opp-table-1:
       500 MHz    731.0 mV
      1000 MHz    731.0 mV
      1200 MHz    751.0 mV
      1398 MHz    771.0 mV
      1608 MHz    781.0 mV
      1800 MHz    831.0 mV
      2016 MHz    911.0 mV
      2208 MHz   1011.0 mV

   opp-table-gpu:
       125 MHz    800.0 mV
       250 MHz    800.0 mV
       286 MHz    800.0 mV
       400 MHz    800.0 mV
       500 MHz    800.0 mV
       667 MHz    800.0 mV
       800 MHz    800.0 mV

##########################################################################

Results validation:

  * Measured clockspeed not lower than advertised max CPU clockspeed
  * No swapping
  * Background activity (%system) OK
  * Throttling occured -> https://tinyurl.com/4ky59sys

Status of performance related governors found below /sys (w/o cpufreq):

  * ffe40000.gpu: simple_ondemand / 125 MHz (powersave performance simple_ondemand / 125 250 286 400 500 667 800)

| Libre Computer AML-A311D-CC Alta | 2208/2016 MHz (throttled) | 6.9 | Debian GNU/Linux trixie/sid arm64 | 9210 | 2259 | 1255260 | 4930 | 9800 | 11.71 |